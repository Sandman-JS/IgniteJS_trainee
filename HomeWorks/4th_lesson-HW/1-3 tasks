<!DOCTYPE html>
<html>
<body>
    <script>
        /*Задача 1

        Представьте, что в JavaScript нет метода call, есть только метод apply. Используя apply, напишите метод call.*/

        var obj = {
            fruit: "Apple",
            color: "green"
        }

        var obj2 = {
            fruit: "Lemon",
            color: "yellow"
        }

        function func() {
            alert(this.fruit + this.color);
        }

        Function.prototype.call = function () {
            this.apply([].shift.apply(arguments), arguments);
        }

        func.call(obj);
        func.call(obj2, 2, 3);



        /*Задача 2

        Напишите функцию compose, которая принимает значение в качестве основного параметра и произвольное количество функций в качестве дополнительных параметров. Функция должна вернуть значение, полученное путем использования основного параметра как аргумента для функций, переданных ей в качестве дополнительных аргументов. 
        Например:
        Если функции передан только один параметр, она должна вернуть его значение. */

        function compose() {
            var res = arguments[0];

            if (arguments.length == 1) {
                return res;
            } else {
                for (var i = 1; i < arguments.length; i++) {
                    res = arguments[i](res);
                }
                return res;
            }
        }

        var doubleTheValue = function (val) { return val * 2; } 
        var addOneToTheValue = function (val) { return val + 1; }

        alert(compose(5, doubleTheValue)); compose(5, doubleTheValue) //должно вернуться значение 10
        alert(compose(5, doubleTheValue, addOneToTheValue)); // должно вернуться значение  11



        /*Задача 3

        Создайте декоратор makeLogging(f, log), который принимает в качестве аргумента функцию f и массив log. Он должен возвращать обёртку вокруг f, которая при каждом вызове записывает («логирует») аргументы в log, а затем передает вызов в f. В этой задаче можно считать, что у функции f ровно один аргумент.*/

        function work(a) {
            /* ... */ // work - произвольная функция, один аргумент
        }
        function makeLogging(f, log) { /* ваш код */ 
            return function(){
                log.push(arguments[0]);
                return f.call(this, arguments[0]);
            }
        }
        var log = [];
        work = makeLogging(work, log);
        work(1); // 1, добавлено в log
        work(5); // 5, добавлено в log
        for (var i = 0; i < log.length; i++) {
            alert( 'Лог:' + log[i] ); // "Лог:1", затем "Лог:5"
        }

    </script>
</body>
</html>
